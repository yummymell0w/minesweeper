{"version":3,"sources":["../../src/board.js"],"names":["Board","numberOfRows","numberOfColumns","numberOfBombs","_numberOfRows","_numberOfColumns","_numberOfBombs","_numberOfTiles","_playerBoard","generatePlayerBoard","_bombBoard","generateBombBoard","rowIndex","columnIndex","console","log","getNumberOfNeighborBombs","neighborOffsets","length","forEach","neighborRowIndex","offset","neighborColumnIndex","numberOfTiles","map","row","join","board","i","rows","j","push","numberOfBombsPlaced","randomRowIndex","Math","floor","random","randomColumnIndex"],"mappings":"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","file":"board.js","sourcesContent":["//Create the Board Class\r\nexport class Board {\r\n    constructor(numberOfRows, numberOfColumns, numberOfBombs) {\r\n        this._numberOfRows = numberOfRows;\r\n        this._numberOfColumns = numberOfColumns;\r\n        this._numberOfBombs = numberOfBombs;\r\n        this._numberOfTiles = numberOfRows * numberOfColumns;\r\n        this._playerBoard = Board.generatePlayerBoard(numberOfRows, numberOfColumns);\r\n        this._bombBoard = Board.generateBombBoard(numberOfRows, numberOfColumns, numberOfBombs);\r\n    }\r\n\r\n//Add a playerBoard() Getter Method\r\n    get playerBoard() {\r\n        return this._playerBoard;\r\n    }\r\n\r\n    //Add flipTile() to the Board Class. Add flipTile() - allows user to flp a tile\r\n    flipTile(rowIndex, columnIndex) {\r\n        if (this._playerBoard[rowIndex][columnIndex] !== ' ') {\r\n            console.log('This tile has already been flipped!');\r\n        } else if (this._bombBoard[rowIndex][columnIndex] === 'B') {\r\n            this._playerBoard[rowIndex][columnIndex] = 'B'; //we should place a bomb at those same row and column indices on the playerBoard.\r\n        } else {\r\n            this._playerBoard[rowIndex][columnIndex] = this.getNumberOfNeighborBombs(rowIndex, columnIndex);\r\n        }\r\n        this._numberOfTiles--;\r\n    };\r\n\r\n    //Add getNumberOfNeighborBombs() to the Board Class. Displaying the number of bombs adjacent to the flipped tile\r\n    getNumberOfNeighborBombs(rowIndex, columnIndex) {\r\n        const neighborOffsets = [\r\n            [-1, -1],\r\n            [-1, 0],\r\n            [-1, 1],\r\n            [0, -1],\r\n            [0, 1],\r\n            [1, -1],\r\n            [1, 0],\r\n            [1, 1]\r\n        ];\r\n        const numberOfRows = this._bombBoard.length;\r\n        const numberOfColumns = this._bombBoard[0].length;\r\n        let numberOfBombs = 0;\r\n        neighborOffsets.forEach(offset => {\r\n            const neighborRowIndex = rowIndex + offset[0];\r\n            const neighborColumnIndex = columnIndex + offset[1];\r\n            if (0 <= neighborRowIndex && neighborRowIndex < numberOfRows &&\r\n                0 <= neighborColumnIndex && neighborColumnIndex < numberOfColumns) {\r\n                if (this._bombBoard[neighborRowIndex][neighborColumnIndex] === 'B') {\r\n                    numberOfBombs++;\r\n                }\r\n            }\r\n        });\r\n        return numberOfBombs;\r\n    };\r\n\r\n    //Check for Safe Tiles\r\n    hasSafeTiles(numberOfTiles, numberOfBombs) {\r\n        return this._numberOfTiles !== this._numberOfBombs;\r\n    }\r\n\r\n    //An Updated printBoard() Function\r\n    print() {\r\n        console.log(this._playerBoard.map(row => row.join(' | ')).join('\\n'));\r\n    };\r\n\r\n    //Dynamically Generate a Player Board\r\n    static generatePlayerBoard(numberOfRows, numberOfColumns) {\r\n        let board = [];\r\n        for (let i = 0; i < numberOfRows; i++) {\r\n            let rows = [];\r\n            for (let j = 0; j < numberOfColumns; j++) {\r\n                rows.push(' ');\r\n            }\r\n            board.push(rows);\r\n        }\r\n        return board;\r\n    };\r\n\r\n    //Dynamically Generate a Bomb Board\r\n    static generateBombBoard(numberOfRows, numberOfColumns, numberOfBombs) {\r\n        let board = [];\r\n        for (let i = 0; i < numberOfRows; i++) {\r\n            let rows = [];\r\n            for (let j = 0; j < numberOfColumns; j++) {\r\n                rows.push(null);\r\n            }\r\n            board.push(rows);\r\n        }\r\n        //Randomly Place Bombs on the Bomb Board\r\n        let numberOfBombsPlaced = 0;\r\n        //An important note: The code in your while loop has the potential to place bombs on top of already existing bombs. This will be fixed when you learn about control flow.\r\n        while (numberOfBombsPlaced < numberOfBombs) {\r\n            let randomRowIndex = Math.floor(Math.random() * numberOfRows);\r\n            let randomColumnIndex = Math.floor(Math.random() * numberOfColumns);\r\n            //Fix generateBombBoard()\r\n            if (randomRowIndex !== 'B' && randomColumnIndex !== 'B') {\r\n                board[randomRowIndex][randomColumnIndex] = 'B';\r\n                numberOfBombsPlaced++;\r\n            }\r\n            board[randomRowIndex][randomColumnIndex] = 'B';\r\n            numberOfBombsPlaced++;\r\n        }\r\n        return board;\r\n    };\r\n}\r\n"]}